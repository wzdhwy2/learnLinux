

		《GIT学习笔记--基础篇》


1.
git版本控制系统比SVN版本控制系统更强大。什么是版本库呢？
版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，
每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。

创建一个版本库非常简单，
第一步，选择一个合适的地方，创建一个空目录:
mkdir /user/michael/learngit
权限修改:
chomn -R  apps:apps /michael

第二步，通过git init命令把这个目录变成Git可以管理的仓库：
git init 
--Initialized empty Git repository in /Users/michael/learngit/.git/
瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，
这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。

2.
git 添加文件；
git add 文件名
git 提交修改（可一次添加多个文件，一次提交）；
git commit -m "填情况说明！"

3.
查看git库中哪些文件被修改了（经过测试确定必须在git库里才能用这条，但无论在库的哪个地方）
git status
查看某个文件具体修改了些什么？（不一定必须在指出文件在git库中所在路径才能看）
git diff XXXX

4.一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了：
rm 文件名
这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了，现在你有两个选择，

一是确实要从版本库中删除该文件，那就用命令
git rm 文件名
git commit -m 【提交说明】

二是删错了，因为版本库里还有呢，所以可以把误删的文件恢复到最新版本：
git checkout 【文件名】
用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。如果一个文件已经被提交到版本库，那么你永远不用担心误删，
但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后  新增的内容



	
5.预演环境用git发布PHP时，常用命令
git branch  查看分支们和当前所在分支
git branch -v   查看当前分支的信息
git checkout [分支名]  这里用来切换分支，也可以用来回退(替换)版本，恢复误删文件
git status  查看库中哪些文件被修改了
git pull 更新
git log 看看更新前和更新后的区别




--------------------------------笔记分割线-----------------------------------------



<版本回退>
1.
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭
使用命令  git reset --hard  [版本的commit ID]
2.
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
3.
要重返未来，用    git reflog   查看命令历史，以便确定要回到未来的哪个版本。




<理解；工作区与缓存区与版本库>

1.你修改一文件，创建一文件后git status 观察git给出的信息提示
Git非常清楚地告诉我们，readme.txt  被修改了，而LICENSE还从来没有被添加过，所以它的状态是Untracked。

2.把readme.txt和LICENSE都 git add  添加后，用git status再查看一下：
因为，git add命令实际上就是把要提交的所有修改放到暂存区（Stage），
所以，执行git commit就可以一次性把暂存区的所有的修改提交到分支（版本库）。
一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：
暂存区也没有任何内容




<理解；修改的流程>

git add  前	    git diff [文件名]         
git add   添加后     git diff HEAD -- [文件名]    
查看缓存区和版本库里面最新版本的区别：

现在，你理解了Git是如何跟踪修改？每次修改，如果不用git add到暂存区，那就不会加入到commit中




<撤销修改(删除)>

改乱了工作区某文件，想直接丢弃工作区的修改(删除行为也算做修改)
      git checkout -- [file文件名]
不但改乱了工作区某文件，还添加到了暂存区,想丢弃修改
      git reset HEAD [file文件名]
      git reset      [file文件名]
      git checkout -- [file文件名]
已经提交了修改到版本库时，想要撤销本次提交，就是版本回退
      git reset --hard  [版本的commit ID] 
 不过前提是没有推送到远程库。




理解
-------  ----------   ---------

工作区     缓存区       版本库

 A.txt                           修改时的 逻辑位置,在工作区有

           A.txt                 添加后的 位置的变化，在缓存区有

                        A.txt    提交后的 逻辑位置，版本库有

------   ----------   ---------
这些东西一直都会在路径下（工作区）看得见，除非删除移动了。但你看状态有大不同！

另外发现;
git rm 一个非空文件夹
git add 一个非空文件夹
git commit -m 版本说明
会有遗漏，遇到提示里面的文件没有添加？
no changes added to commit (use "git add" and/or "git commit -a")
“未添加任何更改（使用“git add”和/或“git commit-a”）”

按照它的提示“git add 或 git commit -a”
git rm yyy
git commit -am 版本说明
反而直接就提交了！无需git add 里面的文件什么的

但是，有时删除文件就不行，提示变了！有时好像也可以
nothing added to commit but untracked files present
(use "git add" to track)
”没有添加到提交但是未跟踪的文件（使用“git add”来跟踪）“





----------------------------------------笔记分割线------------------------------------------------



<搭建简单的远程仓库----实现Git的分布式能力>

现阶段，为了学Git先搭个服务器绝对是小题大作。注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，
所以，需要一点设置

第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，
可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key
 ssh-keygen -t rsa -C "邮箱地址"
一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。

第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：点“Add Key”，你就应该看到已经添加的Key：

第3步：然后，在GitHub右上角找到“Create a new repo”按钮，创建一个新的仓库：在Repository name填入【库名】，其他保持默认设置，
点击“Create repository”按钮，就成功地创建了一个新的Git仓库：



<GitHub上的库与本地库关联,并将本地库存提交至GitHub的库>

在GitHub上的这个仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，
把本地仓库的内容推送到GitHub仓库。现在，我们根据GitHub的提示，
要关联一个远程库，使用命令
 git remote add XXXXX 【Git地址】
 git remote add origin git@github.com:【GitHub账户名】/【库名】.git

关联后，使用命令
git push -u
git push -u origin master
把本地库的内容推送到远程，用git push命令，加上了-u参数，Git不但会把本地的master分支内容推送到远程新的master分支，
还会把 分支 关联起来，在以后的推送或者拉取时就可以简化命令
使用命令
git push origin master推送最新修改；
【git push】
【我直接用git pull推送】
【后面发现不行，不用[git push origin master]
 GitHub上目录不会更新？】



<从远程仓库克隆一个本地仓库>

登陆GitHub，创建一个新的仓库，名字叫gitskills：
我们勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件：
现在，远程库已经准备好了
下一步是用命令git clone克隆一个本地库：
git clone git@github.com:【账户名】/gitskills.git
git clone 【自己的git库的地址】





-----------------------------笔记分割线-------------------------------




<分支的概念，分支创建--切换--合并--删除的原理>

每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。
HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。
一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：

每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长：
 当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上
你看，Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！
不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：
假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：

所以Git合并分支也很快！就改改指针，工作区内容也不变！
合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：
真是太神奇了，你看得出来有些提交是通过分支完成的吗？



<解决分支冲突>

master分支和XXX分支各自都  分别有新的  提交

这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，
 git merge feature1
果然冲突了！Git告诉我们，XXXX文件存在冲突，必须手动解决冲突后再提交。git status这时可以告诉我们冲突的文件：我们修改后保存：再提交：
master分支和feature1分支就能合并了

 git log --graph
命令可以看到分支合并图。



<分支管理模式>

通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。命令
 git merge --no-ff -m “分支合并说明”  分支名



<临时添加bug分支>

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场
git stash 一下，然后去修复bug，修复后再
git stash pop，回到工作现场。
你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
 git stash apply stash@{0}






--------------------------小结--------------------------------



<<<<笔记汇总>>>>

git + XXX
本地git仓库的创建【init】
东西的添加【add】，删除【rm】
提交改动到版本库【commit -m 版本说明】
在缓存区撤销变动【reset 名字】，在工作区撤销变动【checkout 名字】
版本库的回滚与恢复【reset --hard 版本id】


git + XXX
本地git仓库与远程git仓库的关联
 git remote add origin git@github.com:【GitHub账户名】/【库名】.git
提交本地git分支内容到远程git分支并关联
 git push -u origin master
提交本地库到远程仓库
 git push
 git pull


git + XXX
版本日志|提交历史的查看【reflog】【log】
分支的信息查看【branch -v】【branch】
分支的创建【branch 分支名】
分支的切换【checkout 分支名】
一次性创建并切换分支【checkout -b 分支名】
把目标分支合并到现在的分支【merge 分支名】
分支的删除【branch -d 分支名】


git + XXX
看分支合并图 【log --graph 】
保留合并历史的分支合并命令，用分支图能看曾经做过合并
【merge --no-ff -m"分支合并说明" 目标分支名 】




我工作时预演环境用git发布PHP时，常用的命令

日常发布
git branch  查看分支们和当前所在分支
git branch -v   查看当前分支的详细信息
git checkout [分支名]  这里用来切换分支，也可以用来回退(替换)版本，恢复误删文件
git status  查看库中哪些文件被修改了
git pull 更新
git log 看看更新前和更新后的区别

合分支
git merge --no-ff -m “分支说明” [要合过来的分支名]  保留历史合并分支
git log --graph   看分支合并历史

版本回滚
git reflog  看操作历史
git reset --hard [版本id]





20条命令学了多久？
反思怎么样快速学习？读一本书在每一章节都花一样的精力吗？————《how to red a book》
后续的Git知识点【Feature分支】【多人协作】【标签管理】【自定义Git】【搭建Git服务器】等
暂时不再学习，因为实习生的3个月工作范围内很小几率会用。


END


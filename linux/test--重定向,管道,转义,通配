cat: abcdefg: 没有那个文件或目录
cat: hijklnm: 没有那个文件或目录
cat: opqrst: 没有那个文件或目录
cat: uvwxyz: 没有那个文件或目录


重定向
标准重定向：  >  or  <
错误重定向：  2>   or  2<
追加(不覆盖)：  >>  or  << or  2>> or  2<<



管道符：把左边的输出作为右边的输入
cat 123.txt | more | cat | more | cat | more | cat | tail | head | cat 



通配符
? * 


转义符
""  ''  ``  \  



环境变量,既然强调了那一定十分重要！把十个常用的看眼熟
$PATH的作用？
export的作用：局部变量转全局变量
______________________________________
HOME    用户的主目录（即家目录）
SHELL   用户在使用的Shell解释器名称
HISTSIZE        输出的历史命令记录条数
HISTFILESIZE    保存的历史命令记录条数
MAIL    邮件保存路径
LANG    系统语言、语系名称
RANDOM  生成一个随机数字
PS1     Bash解释器的提示符
PATH    定义解释器搜索用户执行命令的路径
EDITOR  用户默认的文本编辑器




vim
一进入为“命令模式”  插入为“编辑模式”  ： 为“末行模式”
命令模式中
	dd 5dd
	yy 5yy
	shift + insert
	O,a,insert...
末行模式中
	:set nu
	:10(光标快速移动到某行)


条件测试语句,分为四种
1.文件判断（符）
-d	测试文件是否为目录类型
-e	测试文件是否存在
-f	判断是否为一般文件
-r	测试当前用户是否有权限读取
-w	测试当前用户是否有权限写入
-x	测试当前用户是否有权限执行


2.逻辑运算（符）
逻辑与，前面满足才执行后面
[ -e /usr/michael/learning/learnlinux/linux/ ] && echo "Linux"
逻辑或，前面执行返回失败才执行
[ $USER = root ] || echo "apps"
逻辑非
[ $USER!=root ] && echo "apps" || echo "root"
“满足 非root 就输出apps“
“不满足 输出apps 就输出root”

freeMem=`free -h | grep Mem: | awk '{print $4}'`
echo $freeMem


3.整数比较运算（符）
[ $freeMem -le 1024 ] &&  echo "内存不足" || echo "内存充足"


4.字符串比较运算（符）







#/bin/bash/

#10点20到11点50：根据临时情况，有要求的环境写shell脚本
#		1.用 sleep 5 | telnet   ————看端口通不通+自动结束
#		2.用 | grep  关键字 && 通  ||  不通   ————做判断，输出判断
#		3.用for 从只有特定格式内容的IP地址文件中一次性取值，做循环————实现自动化
#
#		有点毛躁，幸亏一开始注意了可能的问题
#			1.单机执行太慢，多机要配合
#			2.鉴于一次时间长，多机执行易配合出错，自己没有改用变量，多机区分输入文件和输出文件时少改几个字
#			（增加了输出同一文件（结果顺序就乱了）的潜在可能）
#			3.同上，应该尽量把整个执行结果都记录，事后用命令取值，万一上面加了需求，自己可能换个条件筛选就行了

#目的：用for实现自动化测试端口是否telnet通
#$a:端口号
#$y:telnet所有返回结果
#$z:telnet日志的判断结果
#grep "Connected to"  仔细看Telnet返回的所有结果，用这个关键字可能会不可靠（因为只草草看看了几条Telnet返回结果）
#这份结果一旦错了岂不是让人家白费功夫?而重复执行很耗时！真的是急不得！！！

#18-10-12日:用head命令重定向输入的ip地址(head -n 3 1.txt>1-2.txt)
#会导致脚本中装IP地址的变量$name在跑脚本时出现问题，真是消耗耐心！不用这些没起多大用的东西了！

a=1521
y=telnet.log
z=telnet-if.log

for name in `cat 1-2.txt`
do
        sleep 3 | telnet $name $a  &>>$y
        echo "————————————————————————————————— $name $a————————"&>>$y
        tail -n 4 $y | grep "Connected to"
        if [ $? -eq 0 ]
                then echo ":$name $a 端口通 ！"&>>$z
                else echo ":$name $a 端口不通 ！"&>>$z
        fi
done

